<!-- If a frequency is given, a simple clock divider is integrated if
     the clock in the circuit is not set to the max value.-->
<toolchain name="DE10-Lite" frequency="50000000">
    <commands>
		<command name="Create build script only" requires="verilog">
		</command>
    </commands>
    <files>
	        <!-- Creates the tcl file which contains the pin assignments.-->
        <file name="{?=shortname?}.tcl" overwrite="true" filter="true" id="quartus.tcl">
            <content># Load Quartus II Tcl Project package
package require ::quartus::project

# Add the next line to get the execute_flow command
package require ::quartus::flow

set need_to_close_project 0
set make_assignments 1

# Check that the right project is open
if {[is_project_open]} {
    if {[string compare $quartus(project) {?=shortname?}]} {
        puts "Project {?=shortname?} is not open"
        set make_assignments 0
    }
} else {
    # Only open if not already open
    if {[project_exists {?=shortname?}]} {
        project_open -revision {?=shortname?} {?=shortname?}
    } else {
        project_new -revision {?=shortname?} {?=shortname?}
    }
    set need_to_close_project 1
}
# Make assignments
if {$make_assignments} {
    set_global_assignment -name FAMILY "MAX 10"
    set_global_assignment -name DEVICE 10M50DAF484C7G
	set_global_assignment -name TOP_LEVEL_ENTITY {?=shortname?}
    set_global_assignment -name DEVICE_FILTER_PACKAGE FBGA
    set_global_assignment -name DEVICE_FILTER_PIN_COUNT 484
    set_global_assignment -name RESERVE_ALL_UNUSED_PINS "AS INPUT TRI-STATED"
    set_global_assignment -name FMAX_REQUIREMENT "50 MHz "
    set_global_assignment -name RESERVE_NCEO_AFTER_CONFIGURATION "USE AS REGULAR IO"
    set_global_assignment -name CYCLONEII_RESERVE_NCEO_AFTER_CONFIGURATION "USE AS REGULAR IO"
	set_global_assignment -name NUM_PARALLEL_PROCESSORS ALL
  
	# Include all entities and gates
    set_global_assignment -name VERILOG_FILE {?=shortname?}.v
	
    # Map fpga_clk and ionets to fpga pins
	<![CDATA[<?
	for (i:=0; i<sizeOf(model.ports);i++) {
		port:=model.ports[i];
		if (port.bits=1) {
			print("set_location_assignment PIN_"+port.pin+" -to "+port.name+"\n\t");
			print("set_instance_assignment -name IO_STANDARD \"3.3-V LVTTL\" -to "+port.name+"\n\t");
			}
		else {
			pins := splitString(port.pin);
			for (p:=0;p<sizeOf(pins);p++) {
				print("set_location_assignment PIN_"+pins[p]+" -to "+port.name+"["+p+"]\n\t");
				print("set_instance_assignment -name IO_STANDARD \"3.3-V LVTTL\" -to "+port.name+"["+p+"]\n\t");
			}
		}
	}
		?>]]>
    # Commit assignments
    export_assignments
	
	# Run Analysis and Synthesis, Fitter and Program File Generator
	execute_flow -compile
	
	# To determine if compilation was successful or not
	# and print out a personalized message.
	# If successful, generate SVF file for OpenOCD or urJTAG programming.
	#if {[catch {execute_flow -compile} result]} {
	#	puts "\nResult: $result\n"
	#	puts "ERROR: Compilation failed. See report files.\n"
	#} else {
	#	puts "\nINFO: Compilation was successful.\n"
	#	qexec "quartus_cpf -c -q 10Mhz -g 3.3 -n p {?=shortname?}.sof {?=shortname?}.svf"
	#}
	
	# Generate SVF file for OpenOCD or urJTAG programming.
	qexec "quartus_cpf -c -q 10MHz -g 3.3 -n p {?=shortname?}.sof {?=shortname?}.svf"
	
    # Close project
    if {$need_to_close_project} {
        project_close
    }
}
		</content>
        </file>
			        <!-- Creates the timing constraints file.-->
        <file name="{?=shortname?}.sdc" overwrite="true" filter="true" id="quartus.sdc">
            <content>#**************************************************************
# Create Clock
#**************************************************************
<![CDATA[<?
for (i:=0; i<sizeOf(model.ports);i++) {
    port:=model.ports[i];
    if (port.bits=1) {
        if (port.clock) {
            print("create_clock -period \"50.0 MHz\" [get_ports "+port.name+"]\n");
        }
    }
}
?>]]>
#**************************************************************
# Create Generated Clock
#**************************************************************
derive_pll_clocks



#**************************************************************
# Set Clock Latency
#**************************************************************



#**************************************************************
# Set Clock Uncertainty
#**************************************************************
derive_clock_uncertainty



#**************************************************************
# Set Input Delay
#**************************************************************



#**************************************************************
# Set Output Delay
#**************************************************************



#**************************************************************
# Set Clock Groups
#**************************************************************



#**************************************************************
# Set False Path
#**************************************************************



#**************************************************************
# Set Multicycle Path
#**************************************************************



#**************************************************************
# Set Maximum Delay
#**************************************************************



#**************************************************************
# Set Minimum Delay
#**************************************************************



#**************************************************************
# Set Input Transition
#**************************************************************



#**************************************************************
# Set Load
#**************************************************************
			</content>
		</file>
    </files>
</toolchain>
